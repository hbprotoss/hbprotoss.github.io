<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>hbprotoss的博客 (Macro)</title><link>http://hbprotoss.github.io</link><description></description><lastBuildDate>Sun, 14 Jul 2013 19:57:52 GMT</lastBuildDate><generator>nikola</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>C语言宏的特殊用法和几个坑</title><link>http://hbprotoss.github.io/posts/cyu-yan-hong-de-te-shu-yong-fa-he-ji-ge-keng.html</link><description>&lt;p&gt;总结一下C语言中宏的一些特殊用法和几个容易踩的坑。由于本文主要参考GCC文档，某些细节（如宏参数中的空格是否处理之类）在别的编译器可能有细微差别，请参考相应文档。&lt;/p&gt;
&lt;h3&gt;宏基础&lt;/h3&gt;
&lt;p&gt;宏仅仅是在C预处理阶段的一种文本替换工具，编译完之后对二进制代码不可见。基本用法如下：&lt;/p&gt;
&lt;h4&gt;1. 标示符别名&lt;/h4&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#define BUFFER_SIZE 1024&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;预处理阶段，&lt;code&gt;foo = (char *) malloc (BUFFER_SIZE);&lt;/code&gt;会被替换成&lt;code&gt;foo = (char *) malloc (1024);&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;宏体换行需要在行末加反斜杠\&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#define NUMBERS 1, \&lt;/span&gt;
&lt;span class="cp"&gt;                2, \&lt;/span&gt;
&lt;span class="cp"&gt;                3&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;预处理阶段&lt;code&gt;int x[] = { NUMBERS };&lt;/code&gt;会被扩展成&lt;code&gt;int x[] = { 1, 2, 3 };&lt;/code&gt;&lt;/p&gt;
&lt;h4&gt;2. 宏函数&lt;/h4&gt;
&lt;p&gt;宏名之后带括号的宏被认为是宏函数。用法和普通函数一样，只不过在预处理阶段，宏函数会被展开。优点是没有普通函数保存寄存器和参数传递的开销，展开后的代码有利于CPU cache的利用和指令预测，速度快。缺点是可执行代码体积大。&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#define min(X, Y)  ((X) &amp;lt; (Y) ? (X) : (Y))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;y = min(1, 2);&lt;/code&gt;会被扩展成&lt;code&gt;y = ((1) &amp;lt; (2) ? (1) : (2));&lt;/code&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;宏特殊用法&lt;/h3&gt;
&lt;h4&gt;1. 字符串化(Stringification)&lt;/h4&gt;
&lt;p&gt;在宏体中，如果宏参数前加个&lt;code&gt;#&lt;/code&gt;，那么在宏体扩展的时候，宏参数会被扩展成字符串的形式。如：&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#define WARN_IF(EXP) \&lt;/span&gt;
&lt;span class="cp"&gt;     do { if (EXP) \&lt;/span&gt;
&lt;span class="cp"&gt;             fprintf (stderr, "Warning: " #EXP "\n"); } \&lt;/span&gt;
&lt;span class="cp"&gt;     while (0)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;WARN_IF (x == 0);&lt;/code&gt;会被扩展成：&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;fprintf&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Warning: "&lt;/span&gt; &lt;span class="s"&gt;"x == 0"&lt;/span&gt; &lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这种用法可以用在assert中，如果断言失败，可以将失败的语句输出到反馈信息中&lt;/p&gt;
&lt;h4&gt;2. 连接(Concatenation)&lt;/h4&gt;
&lt;p&gt;在宏体中，如果宏体所在标示符中有&lt;code&gt;##&lt;/code&gt;，那么在宏体扩展的时候，宏参数会被直接替换到标示符中。如：&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#define COMMAND(NAME)  { #NAME, NAME ## _command }&lt;/span&gt;

&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;command&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在宏扩展的时候&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;command&lt;/span&gt; &lt;span class="n"&gt;commands&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;COMMAND&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;quit&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;COMMAND&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;会被扩展成：&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;command&lt;/span&gt; &lt;span class="n"&gt;commands&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s"&gt;"quit"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;quit_command&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s"&gt;"help"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;help_command&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这样就节省了大量时间，提高效率。&lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;几个坑&lt;/h3&gt;
&lt;h4&gt;1. 语法问题&lt;/h4&gt;
&lt;p&gt;由于是纯文本替换，C预处理器不对宏体做任何语法检查，像缺个括号、少个分号神马的预处理器是不管的。这里要格外小心，由此可能引出各种奇葩的问题，一下还很难找到根源。&lt;/p&gt;
&lt;h4&gt;2. 算符优先级问题&lt;/h4&gt;
&lt;p&gt;不仅宏体是纯文本替换，宏参数也是纯文本替换。有以下一段简单的宏，实现乘法：&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#define MULTIPLY(x, y) x * y&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;MULTIPLY(1, 2)&lt;/code&gt;没问题，会正常展开成&lt;code&gt;1 * 2&lt;/code&gt;。有问题的是这种表达式&lt;code&gt;MULTIPLY(1+2, 3)&lt;/code&gt;，展开后成了&lt;code&gt;1+2 * 3&lt;/code&gt;，显然优先级错了。&lt;/p&gt;
&lt;p&gt;在宏体中，给引用的参数加个括号就能避免这问题。&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#define MULTIPLY(x, y) (x) * (y)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;MULTIPLY(1+2, 3)&lt;/code&gt;就会被展开成&lt;code&gt;(1+2) * (3)&lt;/code&gt;，优先级正常了。&lt;/p&gt;
&lt;p&gt;其实这个问题和下面要说到的某些问题都属于由于纯文本替换而导致的语义破坏问题，要格外小心。&lt;/p&gt;
&lt;h4&gt;3. 分号吞噬问题&lt;/h4&gt;
&lt;p&gt;有如下宏定义：&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#define SKIP_SPACES(p, limit)  \&lt;/span&gt;
&lt;span class="cp"&gt;     { char *lim = (limit);         \&lt;/span&gt;
&lt;span class="cp"&gt;       while (p &amp;lt; lim) {            \&lt;/span&gt;
&lt;span class="cp"&gt;         if (*p++ != ' ') {         \&lt;/span&gt;
&lt;span class="cp"&gt;           p--; break; }}}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;假设有如下一段代码：&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="n"&gt;SKIP_SPACES&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lim&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;一编译，GCC报&lt;code&gt;error: ‘else’ without a previous ‘if’&lt;/code&gt;。原来这个看似是一个函数的宏被展开后是一段大括号括起来的代码块，加上分号之后这个if逻辑块就结束了，所以编译器发现这个else没有对应的if。&lt;/p&gt;
&lt;p&gt;这个问题一般用&lt;code&gt;do ... while(0)&lt;/code&gt;的形式来解决：&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#define SKIP_SPACES(p, limit)     \&lt;/span&gt;
&lt;span class="cp"&gt;     do { char *lim = (limit);         \&lt;/span&gt;
&lt;span class="cp"&gt;          while (p &amp;lt; lim) {            \&lt;/span&gt;
&lt;span class="cp"&gt;            if (*p++ != ' ') {         \&lt;/span&gt;
&lt;span class="cp"&gt;              p--; break; }}}          \&lt;/span&gt;
&lt;span class="cp"&gt;     while (0)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;展开后就成了&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这样就消除了分号吞噬问题。&lt;/p&gt;
&lt;p&gt;这个技巧在Linux内核源码里很常见，比如这个置位宏&lt;code&gt;#define SET_REG_BIT(reg, bit)              do { (reg |= (1 &amp;lt;&amp;lt; (bit))); } while (0)&lt;/code&gt;(位于arch/mips/include/asm/mach-pnx833x/gpio.h)&lt;/p&gt;
&lt;h4&gt;4. 宏参数重复调用&lt;/h4&gt;
&lt;p&gt;有如下宏定义：&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#define min(X, Y)  ((X) &amp;lt; (Y) ? (X) : (Y))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;当有如下调用时&lt;code&gt;next = min (x + y, foo (z));&lt;/code&gt;，宏体被展开成&lt;code&gt;next = ((x + y) &amp;lt; (foo (z)) ? (x + y) : (foo (z)));&lt;/code&gt;，可以看到，&lt;code&gt;foo(z)&lt;/code&gt;被重复调用了两次，做了重复计算。更严重的是，如果foo是不可重入的(foo内修改了全局或静态变量)，程序会产生逻辑错误。&lt;/p&gt;
&lt;p&gt;所以，尽量不要在宏参数中传入函数调用。&lt;/p&gt;
&lt;h4&gt;5. 对自身的递归引用&lt;/h4&gt;
&lt;p&gt;有如下宏定义：&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#define foo (4 + foo)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;按前面的理解，&lt;code&gt;(4 + foo)&lt;/code&gt;会展开成&lt;code&gt;(4 + (4 + foo)&lt;/code&gt;，然后一直展开下去，直至内存耗尽。但是，预处理器采取的策略是&lt;strong&gt;&lt;em&gt;只展开一次&lt;/em&gt;&lt;/strong&gt;。也就是说，&lt;code&gt;foo&lt;/code&gt;只会展开成&lt;code&gt;(4 + foo)&lt;/code&gt;，而展开之后&lt;code&gt;foo&lt;/code&gt;的含义就要根据上下文来确定了。&lt;/p&gt;
&lt;p&gt;对于以下的交叉引用，宏体也只会展开一次。&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#define x (4 + y)&lt;/span&gt;
&lt;span class="cp"&gt;#define y (2 * x)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;x&lt;/code&gt;展开成&lt;code&gt;(4 + y) -&amp;gt; (4 + (2 * x))&lt;/code&gt;，&lt;code&gt;y&lt;/code&gt;展开成&lt;code&gt;(2 * x) -&amp;gt; (2 * (4 + y))&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意，这是极不推荐的写法，程序可读性极差。&lt;/strong&gt;&lt;/p&gt;
&lt;h4&gt;6. 宏参数预处理&lt;/h4&gt;
&lt;p&gt;宏参数中若包含另外的宏，那么宏参数在被代入到宏体之前会做一次完全的展开，除非宏体中含有&lt;code&gt;#&lt;/code&gt;或&lt;code&gt;##&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;有如下宏定义：&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#define AFTERX(x) X_ ## x&lt;/span&gt;
&lt;span class="cp"&gt;#define XAFTERX(x) AFTERX(x)&lt;/span&gt;
&lt;span class="cp"&gt;#define TABLESIZE 1024&lt;/span&gt;
&lt;span class="cp"&gt;#define BUFSIZE TABLESIZE&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;&lt;code&gt;AFTERX(BUFSIZE)&lt;/code&gt;会被展开成&lt;code&gt;X_BUFSIZE&lt;/code&gt;。因为宏体中含有&lt;code&gt;##&lt;/code&gt;，宏参数直接代入宏体。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;XAFTERX(BUFSIZE)&lt;/code&gt;会被展开成&lt;code&gt;X_1024&lt;/code&gt;。因为&lt;code&gt;XAFTERX(x)&lt;/code&gt;的宏体是&lt;code&gt;AFTERX(x)&lt;/code&gt;，并没有&lt;code&gt;#&lt;/code&gt;或&lt;code&gt;##&lt;/code&gt;，所以&lt;code&gt;BUFSIZE&lt;/code&gt;在代入前会被完全展开成&lt;code&gt;1024&lt;/code&gt;，然后才代入宏体，变成&lt;code&gt;X_1024&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;-EOF-&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;参考资料：&lt;/p&gt;
&lt;p&gt;&lt;a href="http://gcc.gnu.org/onlinedocs/cpp/Macros.html"&gt;http://gcc.gnu.org/onlinedocs/cpp/Macros.html&lt;/a&gt;&lt;/p&gt;</description><category>C</category><category>Macro</category><guid>http://hbprotoss.github.io/posts/cyu-yan-hong-de-te-shu-yong-fa-he-ji-ge-keng.html</guid><pubDate>Sat, 13 Jul 2013 06:25:31 GMT</pubDate></item></channel></rss>